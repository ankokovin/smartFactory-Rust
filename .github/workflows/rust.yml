name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  change-checker:
    runs-on: ubuntu-latest
    outputs:
      needs-wasm-compilation: ${{ steps.path-filter.outputs.wasm == 'true' || steps.path-filter.outputs.env == 'true'}}
      needs-server-compilation: ${{ steps.path-filter.outputs.server == 'true' || steps.path-filter.outputs.env == 'true'}}
      needs-clippy: ${{ steps.path-filter.outputs.wasm == 'true' || steps.path-filter.outputs.env == 'true' || steps.path-filter.outputs.server == 'true'}}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: path-filter
      with:
        filters: |
          env:
            - 'smart-factory-environment/**'
          wasm:
            - 'smart-factory-wasm-port/**'
          server:
            - 'smart-factory-server/**'
    - name: Print changed modules
      run: |
        echo "WASM=${{ steps.path-filter.outputs.wasm == 'true'}}"
        echo "ENVIRONMENT=${{ steps.path-filter.outputs.env == 'true'}}"
        echo "SERVER=${{ steps.path-filter.outputs.server == 'true'}}"

  clippy:
    needs: change-checker
    if: needs.change-checker.outputs.needs-clippy == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: rustup component add clippy
    - uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-features

  build-wasm:
    needs: change-checker
    if: needs.change-checker.outputs.needs-wasm-compilation == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: jetli/wasm-pack-action@v0.3.0
    - name: Test WASM
      run: cd smart-factory-wasm-port && wasm-pack test --headless --chrome --firefox --node
    # TODO: publish?

  build-server:
    needs: change-checker
    if: needs.change-checker.outputs.needs-server-compilation == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Compile and test
        run: cd smart-factory-server && cargo test --verbose